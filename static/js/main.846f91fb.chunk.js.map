{"version":3,"sources":["component/TabPanel/TabPanel.jsx","redux/actionTypes.js","constants/editorConfig.js","component/Output/Output.jsx","component/Body/Body.jsx","redux/action.js","utils/htmlParser.js","utils/showOutput.js","utils/downlaodCode.js","component/Navbar/Navbar.jsx","App.js","reportWebVitals.js","redux/reducer.js","redux/saga/codeSaga.js","redux/rootSaga.js","redux/store.js","index.js"],"names":["TabPanel","props","children","value","index","other","role","hidden","id","aria-labelledby","actionTypes","Object","freeze","CHANGE_TAB","UPDATE_HTML","UPDATE_CSS","UPDATE_JS","ON_UPDATE_HTML","ON_UPDATE_CSS","ON_UPDATE_JS","TOGGLE_THEME","config","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","Output","className","title","frameBorder","useStyles","makeStyles","root","padding","backgroundColor","height","rootDark","editor","width","Body","classes","currentTab","useSelector","state","code","darkMode","dispatch","useDispatch","Grid","container","spacing","item","xs","sm","mode","theme","fontSize","html","onChange","_n","type","payload","onUpdateHTML","setOptions","focus","css","onUpdateCSS","js","onUpdateJS","mergeAllCode","parser","DOMParser","style","document","createElement","textContent","script","parsedHTML","parseFromString","documentElement","appendChild","outerHTML","showOutput","getElementById","srcdoc","downloadCode","element","file","Blob","href","URL","createObjectURL","download","body","click","a11yProps","flexGrow","palette","background","paper","nav","display","flexDirection","navDark","btn","color","Navbar","AppBar","position","Tabs","e","val","tabIndex","aria-label","Tab","label","Button","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","reducer","action","updateHTMLWorker","updateCSSWorker","updateJSWorker","codeSaga","put","debounce","all","call","rootSaga","fork","sagaMiddleware","createSagaMiddleware","middleware","persistConfig","key","storage","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistedReducer","persistReducer","store","createStore","applyMiddleware","persistor","persistStore","run","combined","ReactDOM","render","StrictMode","loading"],"mappings":"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","file":"static/js/main.846f91fb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`tabpanel-${index}`}\n            aria-labelledby={`tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                    <>{children}</>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};","const actionTypes = Object.freeze({\n    CHANGE_TAB: 'CHANGE_TAB',\n    UPDATE_HTML: 'UPDATE_HTML',\n    UPDATE_CSS: 'UPDATE_CSS',\n    UPDATE_JS: 'UPDATE_JS',\n    ON_UPDATE_HTML: 'ON_UPDATE_HTML',\n    ON_UPDATE_CSS: 'ON_UPDATE_CSS',\n    ON_UPDATE_JS: 'ON_UPDATE_JS',\n    TOGGLE_THEME: 'TOGGLE_THEME'\n});\n\nexport default actionTypes;","const config = {\n    enableBasicAutocompletion: true,\n    enableLiveAutocompletion: true,\n    enableSnippets: true,\n    showLineNumbers: true,\n    tabSize: 4,\n};\n\nexport default config;","import React from 'react';\nimport './Output.scss';\n\nexport default function Output() {\n    return (\n        <div className='output'>\n            <iframe\n                className=\"output__display\"\n                id=\"output__iframe\"\n                title=\"Output\"\n                frameBorder=\"0\"\n            ></iframe>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TabPanel from '../TabPanel/TabPanel';\nimport AceEditor from \"react-ace\";\n\nimport { onUpdateCSS, onUpdateHTML, onUpdateJS } from '../../redux/action';\nimport config from '../../constants/editorConfig';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport Output from '../Output/Output';\n\nconst useStyles = makeStyles({\n    root: {\n        padding: '10px',\n        backgroundColor: '#E7E9EB',\n        height: '100%'\n    },\n    rootDark: {\n        padding: '10px',\n        backgroundColor: '#3C415C',\n        height: '100%'\n    },\n    editor: {\n        width: '100% !important',\n        height: '90.8vh !important'\n    }\n});\n\nexport default function Body() {\n    const classes = useStyles();\n\n    const currentTab = useSelector(state => state.currentTab);\n    const code = useSelector(state => state.code);\n    const darkMode = useSelector(state => state.darkMode);\n\n    const dispatch = useDispatch();\n\n    return (\n        <div className={darkMode ? classes.rootDark : classes.root}>\n            <Grid container spacing={1}>\n                <Grid item xs={12} sm={6}>\n                    <TabPanel value={currentTab} index={0}>\n                        <AceEditor\n                            mode=\"html\"\n                            theme={darkMode ? 'cobalt' : 'github'}\n                            enableBasicAutocompletion={true}\n                            enableLiveAutocompletion={true}\n                            enableSnippets={true}\n                            showLineNumbers={true}\n                            fontSize={18}\n                            value={code.html}\n                            onChange={(_n) => dispatch(onUpdateHTML(_n))}\n                            setOptions={config}\n                            className={classes.editor}\n                            focus={true}\n                        />\n                    </TabPanel>\n                    <TabPanel value={currentTab} index={1}>\n                        <AceEditor\n                            mode=\"css\"\n                            theme={darkMode ? 'cobalt' : 'github'}\n                            enableBasicAutocompletion={true}\n                            enableLiveAutocompletion={true}\n                            enableSnippets={true}\n                            showLineNumbers={true}\n                            fontSize={18}\n                            value={code.css}\n                            onChange={(_n) => dispatch(onUpdateCSS(_n))}\n                            setOptions={config}\n                            className={classes.editor}\n                            focus={true}\n                        />\n                    </TabPanel>\n                    <TabPanel value={currentTab} index={2}>\n                        <AceEditor\n                            mode=\"javascript\"\n                            theme={darkMode ? 'cobalt' : 'github'}\n                            enableBasicAutocompletion={true}\n                            enableLiveAutocompletion={true}\n                            enableSnippets={true}\n                            showLineNumbers={true}\n                            fontSize={18}\n                            value={code.js}\n                            onChange={(_n) => dispatch(onUpdateJS(_n))}\n                            setOptions={config}\n                            className={classes.editor}\n                            focus={true}\n                        />\n                    </TabPanel>\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Output />\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n","import actionTypes from \"./actionTypes\";\n\nexport const changeTab = (tabIndex) => ({\n    type: actionTypes.CHANGE_TAB,\n    payload: tabIndex\n});\n\nexport const updateHTML = (code) => ({\n    type: actionTypes.UPDATE_HTML,\n    payload: code\n});\n\nexport const updateCSS = (code) => ({\n    type: actionTypes.UPDATE_CSS,\n    payload: code\n});\n\nexport const updateJS = (code) => ({\n    type: actionTypes.UPDATE_JS,\n    payload: code\n});\n\nexport const onUpdateHTML = (code) => ({\n    type: actionTypes.ON_UPDATE_HTML,\n    payload: code\n});\n\nexport const onUpdateCSS = (code) => ({\n    type: actionTypes.ON_UPDATE_CSS,\n    payload: code\n});\n\nexport const onUpdateJS = (code) => ({\n    type: actionTypes.ON_UPDATE_JS,\n    payload: code\n});\n\nexport const toggleTheme = () => ({\n    type: actionTypes.TOGGLE_THEME,\n});","\nconst mergeAllCode = (html, css, js) => {\n    const parser = new DOMParser();\n\n    const style = document.createElement('style');\n    style.textContent = css;\n\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.textContent = js;\n\n    const parsedHTML = parser.parseFromString(html, 'text/html');\n    parsedHTML.documentElement.appendChild(style);\n    parsedHTML.documentElement.appendChild(script);\n\n    return parsedHTML.documentElement.outerHTML;\n}\n\nexport default mergeAllCode;","const showOutput = (code) => {\n    const iframe = document.getElementById('output__iframe');\n    iframe.srcdoc = code;\n}\n\nexport default showOutput;","const downloadCode = (code) => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([code], { type: 'text/plain' });\n    element.href = URL.createObjectURL(file);\n    element.download = \"download.txt\";\n    document.body.appendChild(element);\n    element.click();\n}\n\nexport default downloadCode;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { changeTab, toggleTheme } from '../../redux/action';\nimport { Button } from '@material-ui/core';\nimport mergeAllCode from '../../utils/htmlParser';\nimport showOutput from '../../utils/showOutput';\nimport downloadCode from '../../utils/downlaodCode';\n\nfunction a11yProps(index) {\n    return {\n        id: `tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n    nav: {\n        display: 'flex',\n        flexDirection: 'row',\n        backgroundColor: '#FF75A0'\n    },\n    navDark: {\n        display: 'flex',\n        flexDirection: 'row',\n        backgroundColor: '#161D6F'\n    },\n    btn: {\n        color: 'white'\n    }\n}));\n\nexport default function Navbar() {\n    const classes = useStyles();\n\n    const currentTab = useSelector(state => state.currentTab);\n    const code = useSelector(state => state.code);\n    const darkMode = useSelector(state => state.darkMode);\n\n    const dispatch = useDispatch();\n\n    const execute = () => {\n        showOutput(mergeAllCode(code.html, code.css, code.js));\n    }\n\n    const save = () => {\n        downloadCode(mergeAllCode(code.html, code.css, code.js));\n    }\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\" className={darkMode ? classes.navDark : classes.nav}>\n                <Tabs value={currentTab} onChange={(e, val) => dispatch(changeTab(val))} aria-label=\"Language Tab\">\n                    <Tab label=\"HTML\" {...a11yProps(0)} />\n                    <Tab label=\"CSS\" {...a11yProps(1)} />\n                    <Tab label=\"JS\" {...a11yProps(2)} />\n                </Tabs>\n                <Button className={classes.btn} onClick={execute}>Run</Button>\n                <Button className={classes.btn} onClick={save}>Save</Button>\n                <Button className={classes.btn} onClick={() => dispatch(toggleTheme())}>{darkMode ? 'Light' : 'Dark'}</Button>\n            </AppBar>\n        </div>\n    );\n}\n","import './App.css';\nimport Body from './component/Body/Body';\nimport Navbar from './component/Navbar/Navbar';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Navbar />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import actionTypes from \"./actionTypes\";\n\nconst INITIAL_STATE = {\n    currentTab: 0,\n    code: {\n        html: \"\",\n        css: \"\",\n        js: \"\"\n    },\n    darkMode: false\n}\n\nconst reducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case actionTypes.CHANGE_TAB:\n            return {\n                ...state,\n                currentTab: action.payload\n            };\n        \n        case actionTypes.UPDATE_HTML:\n            return {\n                ...state,\n                code: {...state.code, html: action.payload}\n            }\n        \n        case actionTypes.UPDATE_CSS:\n            return {\n                ...state,\n                code: {...state.code, css: action.payload}\n            }\n        \n        case actionTypes.UPDATE_JS:\n            return {\n                ...state,\n                code: {...state.code, js: action.payload}\n            }\n        case actionTypes.TOGGLE_THEME:\n            return {\n                ...state,\n                darkMode: !state.darkMode\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import { all, call, debounce, put } from 'redux-saga/effects';\nimport { updateCSS, updateHTML, updateJS } from '../action';\nimport actionTypes from '../actionTypes';\n\n\nfunction* updateHTMLWorker({ payload }) {\n    yield put(updateHTML(payload));\n};\n\nfunction* updateCSSWorker({ payload }) {\n    yield put(updateCSS(payload));\n};\n\nfunction* updateJSWorker({ payload }) {\n    yield put(updateJS(payload));\n};\n\nfunction* onUpdateHTML() {\n    yield debounce(1000, actionTypes.ON_UPDATE_HTML, updateHTMLWorker);\n};\n\nfunction* onUpdateCSS() {\n    yield debounce(1000, actionTypes.ON_UPDATE_CSS, updateCSSWorker);\n};\n\nfunction* onUpdateJS() {\n    yield debounce(1000, actionTypes.ON_UPDATE_JS, updateJSWorker);\n};\n\nexport default function* codeSaga() {\n    yield all([call(onUpdateHTML), call(onUpdateCSS), call(onUpdateJS)]);\n}","import { all, fork } from \"@redux-saga/core/effects\";\nimport codeSaga from \"./saga/codeSaga\";\n\nexport default function* rootSaga() {\n    yield all([fork(codeSaga)]);    \n}","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from './reducer';\nimport rootSaga from './rootSaga';\n\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst middleware = [sagaMiddleware];\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nconst store = createStore(persistedReducer, composeEnhancers(\n    applyMiddleware(...middleware)\n));\n\n\nconst persistor = persistStore(store);\n\nsagaMiddleware.run(rootSaga);\n\nconst combined = { store, persistor }\nexport default combined;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport \"ace-builds/src-noconflict/mode-html\";\nimport \"ace-builds/src-noconflict/mode-css\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport \"ace-builds/src-noconflict/theme-cobalt\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}