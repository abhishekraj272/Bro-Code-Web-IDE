{"version":3,"sources":["redux/actionTypes.js","constants/editorConfig.js","component/Output/Output.jsx","component/Body/Body.jsx","redux/action.js","utils/htmlParser.js","utils/downlaodCode.js","constants/languages.js","component/Navbar/Navbar.jsx","App.js","reportWebVitals.js","redux/reducer.js","utils/showOutput.js","redux/saga/codeSaga.js","redux/rootSaga.js","redux/store.js","index.js"],"names":["actionTypes","Object","freeze","CHANGE_LANG","UPDATE_CODE","ON_UPDATE_CODE","TOGGLE_THEME","HYDRATE","config","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","Output","className","id","title","frameBorder","useStyles","makeStyles","root","padding","backgroundColor","height","rootDark","editor","width","Body","classes","lang","useSelector","state","code","darkMode","dispatch","useDispatch","Grid","container","spacing","item","xs","sm","mode","slice","toLowerCase","theme","fontSize","value","onChange","type","payload","onUpdateCode","setOptions","focus","mergeAllCode","html","css","js","parser","DOMParser","style","document","createElement","textContent","script","parsedHTML","parseFromString","documentElement","appendChild","outerHTML","downloadCode","element","file","Blob","href","URL","createObjectURL","download","body","click","languages","flexGrow","palette","background","paper","nav","display","flexDirection","navDark","btn","color","formControl","margin","minWidth","select","Navbar","AppBar","position","FormControl","Select","e","changeLang","target","MenuItem","disabled","map","Button","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","reducer","action","codeLang","showOutput","getElementById","srcdoc","updateCodeWorker","codeSaga","put","store","getState","debounce","all","call","rootSaga","fork","sagaMiddleware","createSagaMiddleware","middleware","persistConfig","key","storage","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistedReducer","persistReducer","createStore","applyMiddleware","persistor","persistStore","run","combined","ace","require","set","setModuleUrl","ReactDOM","render","StrictMode","loading","CircularProgress"],"mappings":"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","file":"static/js/main.602cd5ca.chunk.js","sourcesContent":["const actionTypes = Object.freeze({\n    CHANGE_LANG: 'CHANGE_LANG',\n    UPDATE_CODE: 'UPDATE_CODE',\n    ON_UPDATE_CODE: 'ON_UPDATE_CODE',\n    TOGGLE_THEME: 'TOGGLE_THEME',\n    HYDRATE: 'HYDRATE'\n});\n\nexport default actionTypes;","const config = {\n    enableBasicAutocompletion: true,\n    enableLiveAutocompletion: true,\n    enableSnippets: true,\n    showLineNumbers: true,\n    tabSize: 4,\n};\n\nexport default config;","import React from 'react';\nimport './Output.scss';\n\nexport default function Output() {\n   \n    return (\n        <div className='output'>\n            <iframe\n                className=\"output__display\"\n                id=\"output__iframe\"\n                title=\"Output\"\n                frameBorder=\"0\"\n            ></iframe>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AceEditor from \"react-ace\";\n\nimport { onUpdateCode } from '../../redux/action';\nimport config from '../../constants/editorConfig';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport Output from '../Output/Output';\n\nconst useStyles = makeStyles({\n    root: {\n        padding: '10px',\n        backgroundColor: '#E7E9EB',\n        height: '100%'\n    },\n    rootDark: {\n        padding: '10px',\n        backgroundColor: '#3C415C',\n        height: '100%'\n    },\n    editor: {\n        width: '100% !important',\n        height: '90.8vh !important'\n    }\n});\n\nexport default function Body() {\n    const classes = useStyles();\n\n    const lang = useSelector(state => state.lang);\n    const code = useSelector(state => state.code);\n    const darkMode = useSelector(state => state.darkMode);\n\n    const dispatch = useDispatch();\n\n    const getMode = () => {\n        if (lang === 'Python3') return lang.slice(0, -1).toLowerCase();\n        return lang.toLowerCase();\n    };\n\n    const handleChange = (code) => {\n        dispatch(onUpdateCode(lang, code));\n    }\n\n    return (\n        <div className={darkMode ? classes.rootDark : classes.root}>\n            <Grid container spacing={1}>\n                <Grid item xs={12} sm={6}>\n                    <AceEditor\n                        mode={getMode()}\n                        theme={darkMode ? 'cobalt' : 'github'}\n                        enableBasicAutocompletion={true}\n                        enableLiveAutocompletion={true}\n                        enableSnippets={true}\n                        showLineNumbers={true}\n                        fontSize={18}\n                        value={code[lang] ?? \"\"}\n                        onChange={handleChange}\n                        setOptions={config}\n                        className={classes.editor}\n                        focus={true}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <Output />\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n","import actionTypes from \"./actionTypes\";\n\nexport const changeLang = (lang) => ({\n    type: actionTypes.CHANGE_LANG,\n    payload: lang\n});\n\nexport const updateCode = (lang, code) => ({\n    type: actionTypes.UPDATE_CODE,\n    payload: { lang, code }\n});\n\nexport const onUpdateCode = (lang, code) => ({\n    type: actionTypes.ON_UPDATE_CODE,\n    payload: { lang, code }\n});\n\nexport const toggleTheme = () => ({\n    type: actionTypes.TOGGLE_THEME,\n});","\nconst mergeAllCode = (html, css, js) => {\n    const parser = new DOMParser();\n\n    const style = document.createElement('style');\n    style.textContent = css ?? \"\";\n\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.textContent = js ?? \"\";\n\n    const parsedHTML = parser.parseFromString(html, 'text/html');\n    parsedHTML.documentElement.appendChild(style);\n    parsedHTML.documentElement.appendChild(script);\n\n    return parsedHTML.documentElement.outerHTML;\n}\n\nexport default mergeAllCode;","const downloadCode = (code) => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([code], { type: 'text/html' });\n    element.href = URL.createObjectURL(file);\n    element.download = \"bro-code.html\";\n    document.body.appendChild(element);\n    element.click();\n}\n\nexport default downloadCode;","const languages = Object.freeze([\n    {\n        lang: 'HTML',\n        code: 'html'\n    }, {\n        lang: 'CSS',\n        code: 'css'\n    }, {\n        lang: 'Javascript',\n        code: 'javascript'\n    }\n]);\n\nexport default languages;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { changeLang, toggleTheme } from '../../redux/action';\nimport { Button, FormControl, MenuItem, Select } from '@material-ui/core';\nimport mergeAllCode from '../../utils/htmlParser';\nimport downloadCode from '../../utils/downlaodCode';\nimport languages from '../../constants/languages';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n    nav: {\n        display: 'flex',\n        flexDirection: 'row',\n        backgroundColor: '#FF75A0',\n        padding: 6\n    },\n    navDark: {\n        display: 'flex',\n        flexDirection: 'row',\n        backgroundColor: '#161D6F',\n        padding: 6\n    },\n    btn: {\n        color: 'white'\n    },\n    formControl: {\n        margin: 1,\n        minWidth: 120,\n    },\n    select: {\n        color: '#fff'\n    }\n}));\n\nexport default function Navbar() {\n    const classes = useStyles();\n\n    const lang = useSelector(state => state.lang);\n    const code = useSelector(state => state.code);\n    const darkMode = useSelector(state => state.darkMode);\n\n    const dispatch = useDispatch();\n\n    const save = () => {\n        downloadCode(mergeAllCode(code.html, code.css, code.js));\n    }\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\" className={darkMode ? classes.navDark : classes.nav}>\n\n                <FormControl className={classes.formControl}>\n                    <Select\n                        className={classes.select}\n                        value={lang}\n                        onChange={(e) => dispatch(changeLang(e.target.value))}\n                    >\n                        <MenuItem value=\"\" disabled>Language</MenuItem>\n                        {\n                            languages.map(lang => <MenuItem key={lang.code} value={lang.code}>{lang.lang}</MenuItem>)\n                        }\n                    </Select>\n                </FormControl>\n\n                <Button className={classes.btn} onClick={save}>Save</Button>\n                <Button className={classes.btn} onClick={() => dispatch(toggleTheme())}>{darkMode ? 'Light' : 'Dark'}</Button>\n            </AppBar>\n        </div>\n    );\n}\n","import './App.css';\nimport Body from './component/Body/Body';\nimport Navbar from './component/Navbar/Navbar';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Navbar />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import actionTypes from \"./actionTypes\";\n\nconst INITIAL_STATE = {\n    lang: \"html\",\n    code: {},\n    darkMode: false\n}\n\nconst reducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case actionTypes.CHANGE_LANG:\n            return {\n                ...state,\n                lang: action.payload\n            };\n\n        case actionTypes.UPDATE_CODE:\n            const codeLang = action.payload.lang;\n            return {\n                ...state,\n                code: { ...state.code, [codeLang]: action.payload.code }\n            }\n        case actionTypes.TOGGLE_THEME:\n            return {\n                ...state,\n                darkMode: !state.darkMode\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","const showOutput = (code) => {\n    const iframe = document.getElementById('output__iframe');\n    iframe.srcdoc = code;\n}\n\nexport default showOutput;","import { all, call, debounce, put } from 'redux-saga/effects';\nimport mergeAllCode from '../../utils/htmlParser';\nimport showOutput from '../../utils/showOutput';\nimport { updateCode } from '../action';\nimport actionTypes from '../actionTypes';\nimport store from '../store';\n\n\n\nfunction* updateCodeWorker({ payload }) {\n    yield put(updateCode(payload.lang, payload.code));\n    const state = store.getState();\n    showOutput(mergeAllCode(state.code?.html, state.code?.css, state.code?.js));\n};\n\nfunction* onUpdateCode() {\n    yield debounce(1000, actionTypes.ON_UPDATE_CODE, updateCodeWorker);\n};\n\nexport default function* codeSaga() {\n    yield all([call(onUpdateCode)]);\n}","import { all, fork } from \"@redux-saga/core/effects\";\nimport codeSaga from \"./saga/codeSaga\";\n\nexport default function* rootSaga() {\n    yield all([fork(codeSaga)]);    \n}","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from './reducer';\nimport rootSaga from './rootSaga';\n\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst middleware = [sagaMiddleware];\n\nconst persistConfig = {\n    key: 'broEditor',\n    storage,\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nconst store = createStore(persistedReducer, composeEnhancers(\n    applyMiddleware(...middleware)\n));\n\n\nconst persistor = persistStore(store);\n\nsagaMiddleware.run(rootSaga);\n\nconst combined = { store, persistor }\nexport default combined;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { CircularProgress } from '@material-ui/core';\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-html\";\nimport \"ace-builds/src-noconflict/mode-css\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\n\nimport \"ace-builds/src-noconflict/theme-github\";\nimport \"ace-builds/src-noconflict/theme-cobalt\";\n\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-min-noconflict/ext-spellcheck\";\n\nimport \"ace-builds/src-min-noconflict/snippets/javascript\";\nimport \"ace-builds/src-noconflict/snippets/html\";\nimport \"ace-builds/src-noconflict/snippets/css\";\n\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\n\n\nconst ace = require('ace-builds/src-noconflict/ace');\nace.config.set(\"basePath\", \"https://cdn.jsdelivr.net/npm/ace-builds@1.4.3/src-noconflict/\");\nace.config.setModuleUrl('ace/mode/javascript_worker', \"https://cdn.jsdelivr.net/npm/ace-builds@1.4.3/src-noconflict/worker-javascript.js\");\nace.config.setModuleUrl('ace/mode/css_worker', \"https://cdn.jsdelivr.net/npm/ace-builds@1.4.3/src-noconflict/worker-css.js\");\nace.config.setModuleUrl('ace/mode/html_worker', \"https://cdn.jsdelivr.net/npm/ace-builds@1.4.3/src-noconflict/worker-html.js\");\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={<center><CircularProgress /></center>} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}